#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int info;
    struct node *llink, *rlink;
} NODE;

NODE *root = NULL;

void inorder(NODE *ptr) {
    if (ptr) {
        inorder(ptr->llink);
        printf("%d ", ptr->info);
        inorder(ptr->rlink);
    }
}

void preorder(NODE *ptr) {
    if (ptr) {
        printf("%d ", ptr->info);
        preorder(ptr->llink);
        preorder(ptr->rlink);
    }
}

void postorder(NODE *ptr) {
    if (ptr) {
        postorder(ptr->llink);
        postorder(ptr->rlink);
        printf("%d ", ptr->info);
    }
}

void create() {
    int n, i;
    printf("Enter number of nodes: ");
    scanf("%d", &n);
    for (i = 0; i < n; i++) {
        NODE *nn = malloc(sizeof(NODE)), *temp = root, *prev = NULL;
        printf("Enter node value: ");
        scanf("%d", &nn->info);
        nn->llink = nn->rlink = NULL;
        while (temp) {
            prev = temp;
            temp = (nn->info < temp->info) ? temp->llink : temp->rlink;
        }
        if (!prev) root = nn;
        else *(nn->info < prev->info ? &prev->llink : &prev->rlink) = nn;
    }
}

NODE *search(NODE *root, int key) {
    while (root && root->info != key)
        root = (key < root->info) ? root->llink : root->rlink;
    return root;
}

int main() {
    int ch, key;
    do {
        printf("\n1:Create 2:Inorder 3:Preorder 4:Postorder 5:Search 6:Exit\n");
        scanf("%d", &ch);
        switch(ch) {
            case 1: create(); break;
            case 2: inorder(root); break;
            case 3: preorder(root); break;
            case 4: postorder(root); break;
            case 5:
                printf("Enter key to search: ");
                scanf("%d", &key);
                printf(search(root, key) ? "Key found\n" : "Key not found\n");
                break;
            case 6: break;
            default: printf("Invalid choice\n");
        }
    } while (ch != 6);
    return 0;
}
